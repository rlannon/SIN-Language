COMMIT_HISTORY.TXT

A list of changes made since last git commit. This file will go into more detail about the changes than the commit text will.
This file now contains a history of changes.

--------------------------------------------------------------------------------------------

1/16 commit to Compiler:

- Added support in assembler for indexed indirect addressing modes alongside indirect indexed; syntax is the same as in 6502 assembly
- Refactored the data type system to support primary- and sub- types alike; this included major changes to the Interpreter as well as some changes in the Expression and Statement classes
- Changed Interpreter's symbol table system to use a 'typedef struct' for symbols instead of 'std::tuple'
- Made some changes to begin the project of dynamic memory management in the compiler/assembler/etc.; non-const-qualified strings will require dynamic memory on the heap, whereas the current system supports only static/const memory
- Removed some old and unnecessary code

--------------------------------------------------------------------------------------------

1/14 commit to Compiler:

- Renamed the namespace 'addressmode' to 'addressingmode' as it is more accurate/consistent
- Refactored statement::type and expression::type to use enums instead of strings; this allows for code that makes much more sense to read, as well as a much more limited range of choices for the types of statements and expressions we can use (e.g., no more wondering if it is "lvalue" or "LValue", as it is LVALUE)
- Began adding in support for a "builtins" library in the compiler (built-in functions will not be hard-coded in the compiler, but use assembly implementations in separate files that are included in projects)
- Added a vector of already-included libraries so we can avoid duplicate dependencies, though it is not yet fully implemented or well-tested
- Added more compilation routines, though they are nowhere close to finished and the compiler remains largely incomplete
- Many more comments
- Began work to make the functions more modular and maintainable
- Fixed typos
- Removed some unnecessary stuff
- Changed comments from # to // in SIN
- Added "asm<>" keyword for inline ASM; note this is NOT protected and the compiler essentially ignores what you do inside
- Updated the included "BinaryIO" library to its latest version

According to "cloc", the project now contains approximately:
	- 5600 lines of code
	- 1700 comment lines
	- 1600 blank lines

--------------------------------------------------------------------------------------------
1/5 commit to Compiler:

- Added constants for the addressing modes in assembler/SINVM. Now, address modes can be referenced by addressmode::___ instead of a number. This makes for less obfuscated and more maintainable code.

- Added beginning to the compiler. Currently capable of producing simple allocations and assignments (literals only) as well as function definitions.

- Modified the 'lexeme' typedef to be a 'typedef struct' instead of an alias for tuple<string, string>. As such, all references to lexemes were modified (and are now much more readable and maintainable). Further, 'int line_number' was added so that the line number where the lexeme was found is included.

- Added a line counter to the Lexer; every time we call next(), if the character is \n, the counter is incremented.

- Added a line number variable to the Statement class, which uses the line number of the first lexeme in the statement to determine the line on which the statement occurred. This allows the compiler to show what line errors occurred on.

--------------------------------------------------------------------------------------------
12/31 commit to Assembler-Directives:

- Changed assembler labels; they no longer begin with "." unless it is a sublabel. Sublabels are always in reference to the most recent "global-level" loop above them. For example:
	MyLabel:
		... 
	.loop:

This will create two labels in the symbol table:
	MyLabel
	MyLabel.loop
Referencing .loop underneath "MyLabel" will look for "MyLabel.loop".

- Because of this, the "is_label()" function was modified to look for a colon at the end of the label rather than a period at the start.

- Added macro support. While label and constant values will be updated by the linker, macro values will not; this is because macro values, when set, are set to a specific value. As such, they should remain unchanged. This is achieved through the sue of another symbol class, "M"

- Modified the values corresponding to the various symbol classes.

--------------------------------------------------------------------------------------------

12/28 commit to Assembler-Directives:

- Updated main program so that it's cleaner and has better support for flags

- Added processor directives:
	- @db - define a constant
	- @rs - reserve memory space (not fully implemented)
	- @include - include a file

This entailed:
	- Updating the linker and adding "C" and "R" classes
	- Updating the assembler
		- Pass 1 now processes all assembler directives; pass 2 ignores them
		- Pass 1 now does what pass 2 does to parse lines -- it creates an array of strings, delimited by spaces
	- Updating the SinObjectFile class
	- Updating the SINVM

Further:
- Began work on the compiler proper
- Added a SymbolTable class for use in the compiler's symbol tables
- Bug fixes
- More comments
- Added includes to SIN files, which required updating the Lexer and Parser classes

Note there are many "TODO:" comments in the code. One major area of focus next is the disassemble function in the Assembler class; it must be updated to support the new .sinc format. These "TODO:" comments will be addressed in future commits.

--------------------------------------------------------------------------------------------

- "changelog.txt" renamed to "commit_history.txt"

- Changed `uint8_t* PC` to `uint16_t PC`; the program counter now holds a memory address in the VM instead of a pointer to the address within the C++ program. This allows us to use a call stack and more easily move around in our program memory. As such, all control flow instructions were modified.

- All pointers were changed to uint16_t type instead of size_t or uint8_t*

- Added the class that will implement our compiler

- Added a memory map

--------------------------------------------------------------------------------------------

12/19:

- Added changelog file; this file's purpose is to log changes as they are made and to go into greater depth about the changes that were made and /why/ they were made.

- Moved all of the opcode constant definitions into "OpcodeConstants.h", which is included in "Assembler.h". The point of this is to:
	- Declutter the Assembler header file
	- Keep the code more organized and maintainable

- Changed "void SINVM::execute_load(int* reg_target)" to "int SINVM::execute_load()"; there is no good reason to have it modify an integer via pointers when it can just return one. While modifying the integer may be emblematic of some other programming style, there is no point to doing it this way so it was changed to return an int.

- Added more comments to code in order to make it more readable

- Simplified some expressions throughout in an attempt to clean up the code

- Added macro support in the assembler. The assembler will parse all macros in the second pass. Unlike labels, macros cannot be referenced before assignment/declaration (much like variables in SIN). This is because labels get their own pass in the assembler to be added; macros are parsed on the second pass. This allows them to be changed after their use.

- Added a disassemble function. Given a SIN bytecode / compiled SIN file, it will produce a SINASM file of a given name based on the compiled file supplied. Note that labels and macros are NOT preserved.

- Moved the function to load a .sinc file into its own file; because it is referenced by both the Assembler and the SINVM, it should be accessible to both in one file, rather than having duplicate definitions in separate files. And, because no instance of the Assembler is opened within the SINVM, it made the most sense to move it into its own file.
